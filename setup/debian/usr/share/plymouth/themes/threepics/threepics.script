# Hintergrund
Window.SetBackgroundTopColor(0.1, 0.1, 0.1);
Window.SetBackgroundBottomColor(0.0, 0.0, 0.0);

# Logo in der Mitte
#logo.image = Image("logo.png");
logo.image = Image("logo.png").Scale(logo.image.GetWidth() * 0.6, logo.image.GetHeight() * 0.6);
logo.sprite = Sprite(logo.image);
logo.opacity_angle = 0;

logo.sprite.SetX(Window.GetX() + Window.GetWidth() / 2 - logo.image.GetWidth() / 2);
logo.sprite.SetY(Window.GetY() + Window.GetHeight() / 2 - logo.image.GetHeight() / 2 - 30);

# Fortschrittsbalken-Komponenten
progress_box.image = Image("progress_box.png");
progress_box.sprite = Sprite(progress_box.image);

progress_box.x = Window.GetWidth() / 2 - progress_box.image.GetWidth() / 2;
progress_box.y = logo.sprite.GetY() + logo.image.GetHeight() + 30;

progress_box.sprite.SetPosition(progress_box.x, progress_box.y, 0);

progress_bar.original_image = Image("progress_bar.png");
progress_bar.sprite = Sprite();

progress_bar.x = progress_box.x + (progress_box.image.GetWidth() - progress_bar.original_image.GetWidth()) / 2;
progress_bar.y = progress_box.y + (progress_box.image.GetHeight() - progress_bar.original_image.GetHeight()) / 2;

progress_bar.sprite.SetPosition(progress_bar.x, progress_bar.y, 1);

# Refresh-Loop: Logo-Atmung
fun refresh_callback ()
{
  logo.opacity_angle += ((2 * 3.14) / 50) * 0.5;
  min_opacity = 0.8;
  opacity = (Math.Cos(logo.opacity_angle) + 1) / 2;
  opacity *= 1 - min_opacity;
  opacity += min_opacity;
  logo.sprite.SetOpacity(opacity);
}

Plymouth.SetRefreshFunction(refresh_callback);

# Fortschrittsbalken-Callback
fun progress_callback (duration, progress)
{
  if (progress_bar.image.GetWidth() != Math.Int(progress_bar.original_image.GetWidth() * progress))
  {
    progress_bar.image = progress_bar.original_image.Scale(progress_bar.original_image.GetWidth() * progress, progress_bar.original_image.GetHeight());
    progress_bar.sprite.SetImage(progress_bar.image);
  }
}

Plymouth.SetBootProgressFunction(progress_callback);

# Sauberes Beenden
fun quit_callback ()
{
  logo.sprite.SetOpacity(1);
}

Plymouth.SetQuitFunction(quit_callback);
