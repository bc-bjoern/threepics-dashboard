#!/bin/bash
set -e  # Exit on any error
set -x

LOGFILE="/var/log/threepics-postinst.log"
exec >> "$LOGFILE" 2>&1

echo "‚û° postinst started at $(date)"

FRONTEND_DIR="/opt/threepics/threepics-dashboard/frontend"
BACKEND_DIR="/opt/threepics/threepics-dashboard/backend"
BASHRC="/home/threepics/.bashrc"
BASH_PROFILE="/home/threepics/.bash_profile"
XINITRC="/home/threepics/.xinitrc"
VIMRC="/home/threepics/.vimrc"

if [ -d /opt/threepics/threepics-dashboard ]; then
  echo "üõ† Fixing ownership of /opt/threepics/threepics-dashboard"
  chown -R threepics:threepics /opt/threepics/threepics-dashboard
fi

# 1. Fix permissions for critical system files
if [ -f /etc/sudoers.d/threepics ]; then
  chmod 440 /etc/sudoers.d/threepics
  chown root:root /etc/sudoers.d/threepics
fi

if [ -f /etc/systemd/system/threepics-frontend.service ]; then
  chown root:root /etc/systemd/system/threepics-frontend.service
fi
if [ -f /etc/systemd/system/threepics-backend.service ]; then
  chown root:root /etc/systemd/system/threepics-backend.service
fi

# 2. Ensure 'threepics' user exists
if ! id -u threepics &>/dev/null; then
  useradd -m -s /bin/bash threepics
  echo "‚úÖ Created user 'threepics'"
fi

# 3. Ensure home directory exists and is owned correctly
if [ ! -d /home/threepics ]; then
  mkdir -p /home/threepics
  chown threepics:threepics /home/threepics
  chmod 755 /home/threepics
fi

# 4. Create .xinitrc for X11 auto-start
cat << 'EOF' > "$XINITRC"
#!/bin/sh
xset -dpms
xset s off
xset s noblank

sleep 5

openbox-session &
unclutter -idle 0 &
chromium-browser --noerrdialogs --disable-infobars --kiosk http://localhost:38329
EOF

chmod 755 "$XINITRC"
chown threepics:threepics "$XINITRC"
echo "‚úÖ .xinitrc created"

# 5. Create /opt/threepics and assign ownership
chown threepics:threepics "$XINITRC"


if [ ! -d "$FRONTEND_DIR" ]; then
  echo "‚ùå $FRONTEND_DIR fehlt ‚Äì Entpacken schlug fehl oder wurde vorher gel√∂scht."
  exit 1
fi

# Nur schreiben, wenn frontend vorhanden
if [ -d "$FRONTEND_DIR" ]; then
  cat > "$FRONTEND_DIR/.env" <<EOF
VITE_BACKEND_URL=http://localhost:3000
VITE_WS_URL=ws://localhost:8081
EOF
  chown threepics:threepics "$FRONTEND_DIR/.env"
  chmod 644 "$FRONTEND_DIR/.env"
  echo "‚úÖ .env written to frontend"
else
  echo "‚ùå $FRONTEND_DIR fehlt ‚Äì kann .env nicht schreiben"
  exit 1
fi

# 9. Verify required tools
for bin in python3 pip3; do
  command -v "$bin" >/dev/null || { echo "‚ùå Missing required tool: $bin"; exit 1; }
done

# Ensure .bashrc exists
touch "$BASHRC"
chown threepics:threepics "$BASHRC"
chmod 644 "$BASHRC"

CONFIG_DIR="/opt/threepics/threepics-dashboard/backend/config"
SETUP_FILE="$CONFIG_DIR/setup.json"

mkdir -p "$CONFIG_DIR"
chown threepics:threepics "$CONFIG_DIR"

if [ ! -f "$SETUP_FILE" ]; then
    cat > "$SETUP_FILE" <<EOF
{
  "delay_seconds": 20,
  "language": "en",
  "sync_interval": 120,
  "transition_effect": "none",
  "transition_duration": "1.0",
  "orientation": "landscape"
}
EOF
    chown threepics:threepics "$SETUP_FILE"
    echo "‚úÖ setup.json mit Defaults erstellt"
else
    echo "‚úÖ setup.json existiert bereits ‚Äì wird nicht √ºberschrieben"
fi

# 12b. Install serve globally for threepics user
echo "üì¶ Installing serve globally for user 'threepics'..."
runuser -u threepics -- bash -c '
  mkdir -p ~/.npm-global
  npm config set prefix ~/.npm-global
  export PATH="$HOME/.npm-global/bin:$PATH"
  npm install -g serve
'

# Ensure serve is in ~/.bashrc
if ! grep -q 'npm-global' "$BASHRC"; then
  echo 'export PATH="$HOME/.npm-global/bin:$PATH"' >> "$BASHRC"
fi

echo "‚úÖ serve installed globally"


# 12. Setup Python backend
if [ -d "$BACKEND_DIR" ]; then
  echo "üêç Setting up Python venv..."
  cd "$BACKEND_DIR"
  if [ -f "$BACKEND_DIR/package.json" ]; then
    runuser -u threepics -- npm install
  fi
  python3 -m venv .venv
  chown -R threepics:threepics .venv
  runuser -u threepics -- bash -c "
	source $BACKEND_DIR/.venv/bin/activate && \
    pip install --upgrade pip && \
    pip install -r $BACKEND_DIR/scripts/requirements.txt
	deactivate
  "
else
  echo "‚ö†Ô∏è Backend directory not found"
fi

# 13. Enable and reload services
systemctl enable threepics-backend.service
systemctl enable threepics-frontend.service
systemctl enable getty@tty1.service
systemctl daemon-reexec
systemctl daemon-reload

# 14. Create user-friendly .vimrc
if [ ! -f "$VIMRC" ]; then
  cat << 'EOF' > "$VIMRC"
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set smartindent
syntax on
set number
EOF
  chown threepics:threepics "$VIMRC"
  echo "‚úÖ .vimrc created"
fi

# 15. Create .bash_profile for startx autostart
cat << 'EOF' > "$BASH_PROFILE"
if [ -f ~/.bashrc ]; then
  . ~/.bashrc
fi

if [ -z "$DISPLAY" ] && [ "$(tty)" = "/dev/tty1" ]; then
  startx
fi
EOF
chown threepics:threepics "$BASH_PROFILE"
echo "‚úÖ .bash_profile created"

# 16. Add useful aliases to .bashrc
grep -q "alias restart-backend=" "$BASHRC" || cat << 'EOF' >> "$BASHRC"

# === Useful Aliases ===
alias ll='ls -lh --color=auto'
alias cd-dashboard='cd /opt/threepics/threepics-dashboard && . backend/.venv/bin/activate'

# Service restart
alias restart-backend='sudo /bin/systemctl restart threepics-backend.service'
alias restart-frontend='sudo /bin/systemctl restart threepics-frontend.service'
alias restart-all='restart-backend && restart-frontend'

# Logs
alias logs-backend='sudo /bin/journalctl -u threepics-backend.service -n 50 --no-pager'
alias logs-frontend='sudo /bin/journalctl -u threepics-frontend.service -n 50 --no-pager'
alias logs-follow-backend='sudo /bin/journalctl -u threepics-backend.service -f'
alias logs-follow-frontend='sudo /bin/journalctl -u threepics-frontend.service -f'

cd /opt/threepics/threepics-dashboard/
EOF
chown threepics:threepics "$BASHRC"

# 17. Setup cronjobs if not already present
echo "üìÜ Configuring cronjobs..."
CRONTAB_TMP=$(mktemp)
crontab -u threepics -l 2>/dev/null > "$CRONTAB_TMP" || true

# Nur hinzuf√ºgen, wenn update.sh noch nicht eingetragen ist
if ! grep -q 'update.sh' "$CRONTAB_TMP"; then
  echo "0 3 * * 0 /opt/threepics/threepics-dashboard/setup/update.sh 2>&1" >> "$CRONTAB_TMP"
  crontab -u threepics "$CRONTAB_TMP"
  echo "‚úÖ Cronjob for update.sh added"
else
  echo "üîÅ Cronjob for update.sh already exists ‚Äì skipping"
fi

rm -f "$CRONTAB_TMP"


# disable splash 
CONFIG_FILE="/boot/firmware/config.txt"
SETTING="disable_splash=1"

# Pr√ºfen, ob die Datei existiert
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Hinweis: Datei $CONFIG_FILE nicht vorhanden ‚Äì Eintrag '$SETTING' wird √ºbersprungen."
    return 0 2>/dev/null || exit 0
fi

# Pr√ºfen, ob der Eintrag bereits korrekt vorhanden ist
if grep -q "^${SETTING}$" "$CONFIG_FILE"; then
    echo "Eintrag bereits vorhanden: $SETTING"
else
    # Vorhandenen Eintrag ersetzen oder neu einf√ºgen
    if grep -q "^disable_splash=" "$CONFIG_FILE"; then
        sed -i "s/^disable_splash=.*/$SETTING/" "$CONFIG_FILE"
        echo "Eintrag aktualisiert: $SETTING"
    else
        echo "$SETTING" >> "$CONFIG_FILE"
        echo "Eintrag hinzugef√ºgt: $SETTING"
    fi
fi

# plymouth > cmdline splash quiet plymouth.ignore-serial-consoles
PLYMOUTH_CONF="/etc/plymouth/plymouthd.conf"
DESIRED_THEME="threepics"

if [ -f "$PLYMOUTH_CONF" ]; then
  CURRENT_THEME=$(grep '^Theme=' "$PLYMOUTH_CONF" | cut -d'=' -f2)
else
  CURRENT_THEME=""
fi

if [ "$CURRENT_THEME" != "$DESIRED_THEME" ]; then
  echo "üñºÔ∏è Aktiviere Plymouth-Theme '$DESIRED_THEME'..."
  plymouth-set-default-theme -R "$DESIRED_THEME"
  echo "‚úÖ Plymouth-Theme gesetzt auf $DESIRED_THEME"
else
  echo "‚úÖ Plymouth-Theme '$DESIRED_THEME' ist bereits aktiv"
fi



systemctl start threepics-backend.service
systemctl start threepics-frontend.service

echo "üéâ postinst script completed successfully at $(date)"
exit 0
