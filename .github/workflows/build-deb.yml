name: Build Debian Package

on:
  push:
    tags: ['v*']
    branches: ['dev']

permissions:
  contents: write

jobs:
  build-deb:
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: threepics
      PACKAGE_NAME: threepics-dashboard

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # wichtig: vollständige Git-Historie inkl. Tags
          fetch-tags: true

      - name: Set Version
        run: |
          # Hole letzten Git-Tag (z. B. v1.0.0), fallback auf 0.1.0
          BASE_VERSION=$(git tag --sort=-creatordate | grep -E '^v?[0-9]+\.[0-9]+' | tail -n1 | sed 's/^v//' || echo "0.1.0")

          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M)

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            RAW_TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${RAW_TAG#v}"  # entfernt führendes "v", falls vorhanden
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"
            NEXT_PATCH=$(git rev-list --count origin/dev)
            #NEXT_PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}~dev-${TIMESTAMP}-${SHORT_SHA}"
          fi

          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILDROOT=$RUNNER_TEMP/${PACKAGE_NAME}_build" >> $GITHUB_ENV


      - name: Show Version
        run: echo "Building version ${{ env.VERSION }}"

      - name: Prevent dev version in stable
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          if [[ "${{ env.VERSION }}" == *~dev* ]]; then
            echo "❌ ERROR: dev version must not be released to stable!"
            exit 1
          fi

      - name: Prepare Build Directory
        run: |
          mkdir -p "${{ env.BUILDROOT }}/DEBIAN"
          cp -r setup/debian/* "${{ env.BUILDROOT }}/"
          mkdir -p "${{ env.BUILDROOT }}/opt/${{ env.PROJECT_NAME }}/${{ env.PACKAGE_NAME }}"

          echo "Package: ${{ env.PACKAGE_NAME }}" > "${{ env.BUILDROOT }}/DEBIAN/control"
          echo "Version: \${VERSION}" >> "${{ env.BUILDROOT }}/DEBIAN/control"
          echo "Section: base" >> "${{ env.BUILDROOT }}/DEBIAN/control"
          echo "Priority: optional" >> "${{ env.BUILDROOT }}/DEBIAN/control"
          echo "Architecture: all" >> "${{ env.BUILDROOT }}/DEBIAN/control"
          echo "Depends: nodejs, npm, chromium-browser, openbox, git, cron, xinit, x11-xserver-utils, libx11-6, libxext6, vim, python3, python3-pip, python3-venv, unclutter, fonts-noto-color-emoji, plymouth, plymouth-themes, ntfs-3g" >> "${{ env.BUILDROOT }}/DEBIAN/control"
          echo "Maintainer: Björn Becker <bjoern.becker@mailbox.org>" >> "${{ env.BUILDROOT }}/DEBIAN/control"
          echo "Description: Dashboard für den Threepics-Raspberry Pi mit Kiosk-Modus und Systemdiensten." >> "${{ env.BUILDROOT }}/DEBIAN/control"


      - name: Fix Permissions
        run: |
          chmod 440 "$BUILDROOT/etc/sudoers.d/threepics"
          find "${{ env.BUILDROOT }}" -type d -exec chmod 755 {} \;
          find "${{ env.BUILDROOT }}" -type f -exec chmod 644 {} \;
          chmod +x "${{ env.BUILDROOT }}/build-deb.sh" || true
          chmod -R 755 "${{ env.BUILDROOT }}/DEBIAN"
          chmod 644 "${{ env.BUILDROOT }}/DEBIAN/control"
          chmod 440 "${{ env.BUILDROOT }}/etc/sudoers.d/threepics"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: pnpm install

      - name: Build Frontend
        working-directory: frontend
        run: pnpm build

      - name: Copy full source (backend + frontend + dist) to .deb structure
        run: |
          mkdir -p "${{ env.BUILDROOT }}/opt/${{ env.PROJECT_NAME }}/${{ env.PACKAGE_NAME }}/frontend"
          cp -r frontend/dist/* "${{ env.BUILDROOT }}/opt/${{ env.PROJECT_NAME }}/${{ env.PACKAGE_NAME }}/frontend/"
          mkdir -p "${{ env.BUILDROOT }}/opt/${{ env.PROJECT_NAME }}/${{ env.PACKAGE_NAME }}/backend"
          rsync -a backend/ "${{ env.BUILDROOT }}/opt/${{ env.PROJECT_NAME }}/${{ env.PACKAGE_NAME }}/backend/"

      - name: Replace VERSION in control file
        run: |
          sed -i "s/\${VERSION}/${{ env.VERSION }}/g" "${{ env.BUILDROOT }}/DEBIAN/control"

      - name: Build DEB
        run: |
          dpkg-deb --build "${{ env.BUILDROOT }}" "${{ env.PACKAGE_NAME }}_${{ env.VERSION }}.deb"

      - name: List Artifacts
        run: ls -lh "${{ env.PACKAGE_NAME }}_${{ env.VERSION }}.deb"

      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          files: "${{ env.PACKAGE_NAME }}_${{ env.VERSION }}.deb"


      - name: Upload .deb as artifact (for dev builds)
        if: github.ref == 'refs/heads/dev'
        uses: actions/upload-artifact@v4
        with:
          name: dev-deb-package
          path: "${{ env.PACKAGE_NAME }}_${{ env.VERSION }}.deb"

      - name: Checkout gh-pages branch
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Copy .deb to gh-pages/pool/
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p gh-pages/pool/${{ env.PACKAGE_NAME }}
          cp ${{ env.PACKAGE_NAME }}_${{ env.VERSION }}.deb gh-pages/pool/${{ env.PACKAGE_NAME }}/

      - name: Generate Packages.gz
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p gh-pages/dists/stable/main/binary-armhf
          dpkg-scanpackages -m gh-pages/pool /dev/null > gh-pages/dists/stable/main/binary-armhf/Packages
          gzip -kf gh-pages/dists/stable/main/binary-armhf/Packages

      - name: Generate Release for stable
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd gh-pages
          apt-ftparchive -c=release-stable.conf release dists/stable > dists/stable/Release

      - name: Setup GPG for non-interactive use
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p ~/.gnupg
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          chmod 700 ~/.gnupg
          chmod 600 ~/.gnupg/*
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent

      - name: Import GPG Key
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode > private.key
          gpg --batch --yes --import private.key

      - name: Sign Release file
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "${{ secrets.GPG_PASSPHRASE }}" > pass.txt
          gpg --batch --yes --pinentry-mode loopback \
              --passphrase-file pass.txt \
              -abs -o gh-pages/dists/stable/Release.gpg gh-pages/dists/stable/Release

      - name: List GPG keys
        if: startsWith(github.ref, 'refs/tags/')
        run: gpg --list-secret-keys --keyid-format LONG

      - name: Commit and Push to gh-pages
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd gh-pages
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Publish ${{ env.PACKAGE_NAME }} ${{ env.VERSION }}"
          git push origin gh-pages


      - name: Checkout gh-pages branch (for dev)
        if: github.ref == 'refs/heads/dev'
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Cleanup keep only last 3 dev .deb files
        if: github.ref == 'refs/heads/dev'
        run: |
          cd gh-pages/pool/${{ env.PACKAGE_NAME }}
          ls -1t *.deb | tail -n +4 | xargs -r rm --

      - name: Copy .deb to gh-pages/pool/ (for dev)
        if: github.ref == 'refs/heads/dev'
        run: |
          mkdir -p gh-pages/pool/${{ env.PACKAGE_NAME }}
          cp ${{ env.PACKAGE_NAME }}_${{ env.VERSION }}.deb gh-pages/pool/${{ env.PACKAGE_NAME }}/

      - name: Generate unstable Packages.gz
        if: github.ref == 'refs/heads/dev'
        run: |
          cd gh-pages
          mkdir -p dists/unstable/main/binary-armhf
          dpkg-scanpackages -m pool /dev/null > dists/unstable/main/binary-armhf/Packages
          gzip -kf dists/unstable/main/binary-armhf/Packages

      - name: Generate Release for unstable
        if: github.ref == 'refs/heads/dev'
        run: |
          cd gh-pages
          rm -f dists/unstable/Release
          apt-ftparchive -c=release-unstable.conf release dists/unstable > dists/unstable/Release

      - name: Setup GPG for non-interactive use (dev)
        if: github.ref == 'refs/heads/dev'
        run: |
          mkdir -p ~/.gnupg
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          chmod 700 ~/.gnupg
          chmod 600 ~/.gnupg/*
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent

      - name: Import GPG Key (dev)
        if: github.ref == 'refs/heads/dev'
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 --decode > private.key
          gpg --batch --yes --import private.key

      - name: Sign unstable Release
        if: github.ref == 'refs/heads/dev'
        run: |
          echo "${{ secrets.GPG_PASSPHRASE }}" > pass.txt
          gpg --batch --yes --pinentry-mode loopback \
               --passphrase-file pass.txt \
               -abs -o gh-pages/dists/unstable/Release.gpg gh-pages/dists/unstable/Release

      - name: Commit and Push to gh-pages (dev)
        if: github.ref == 'refs/heads/dev'
        run: |
          cd gh-pages
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Publish UNSTABLE ${{ env.PACKAGE_NAME }} ${{ env.VERSION }}"
          git push origin gh-pages
